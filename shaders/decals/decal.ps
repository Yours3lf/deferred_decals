#version 430 core

layout(early_fragment_tests) in;

layout(binding=0) uniform sampler2D texture0; //depth
layout(binding=1) uniform sampler2D texture1; //decal albedo
layout(binding=2) uniform sampler2D texture2; //decal normals

uniform mat4 mvp;
uniform mat4 inv_mv;
uniform mat4 mv;
uniform mat4 normal_mat;
uniform vec3 ll, ur, cam_pos;

layout(location=0) out vec4 color;
layout(location=1) out vec4 normals;

const float far = 2500;
const float near = 2.5;

float A = -(far + near) / (far - near);
float B = -2 * far * near / (far - near);

mat3 cotangent_frame( vec3 n, vec3 p, vec2 uv )
{
  // get edge vectors of the pixel triangle
  vec3 dp1 = dFdx( p );
  vec3 dp2 = dFdy( p );
  vec2 duv1 = dFdx( uv );
  vec2 duv2 = dFdy( uv );

  // solve the linear system
  vec3 dp2perp = cross( dp2, n );
  vec3 dp1perp = cross( n, dp1 );
  vec3 t = dp2perp * duv1.x + dp1perp * duv2.x;
  vec3 b = dp2perp * duv1.y + dp1perp * duv2.y;

  // construct a scale-invariant frame
  float invmax = inversesqrt( max( dot(t,t), dot(b,b) ) );
  return mat3( t * invmax, b * invmax, n );
}

vec3 perturb_normal( vec3 n, vec3 v, vec2 uv )
{
  vec3 decal_normal = texture( texture2, uv ).xyz;
  decal_normal = decal_normal * 2 - 1;
  mat3 tbn = cotangent_frame( n, -v, uv );
  return normalize( tbn * decal_normal );
}

void main()
{
  vec2 screen_size = textureSize( texture0, 0 );
  vec2 ss_texcoord = gl_FragCoord.xy / screen_size;

  vec2 depth_uv = ss_texcoord;
  vec2 pos_xy = mix( ll.xy, ur.xy, ss_texcoord.xy );

	float depth = texture( texture0, depth_uv ).x;
  float linear_depth = -B / (depth * 2 - 1 + A);

  vec4 recon_vs_pos = vec4(vec3(pos_xy / ll.z, 1) * linear_depth, 1);
	vec4 recon_obj_pos = inv_mv * recon_vs_pos;

  if( any( lessThan(0.5 - abs(recon_obj_pos.xyz), vec3(0)) ) )
    discard;

  vec2 uv = recon_obj_pos.xz + 0.5;

  vec4 decal_albedo = texture( texture1, uv );

  if( decal_albedo.a < 0.1 )
    discard;

  vec3 recon_normal = -normalize(cross(dFdy(recon_vs_pos.xyz), dFdx(recon_vs_pos.xyz)));

  vec3 decal_normal = perturb_normal( recon_normal, cam_pos - recon_vs_pos.xyz, uv );

  vec3 orientation = normalize( mv[1].xyz );
  float normal_threshold = cos( radians( 60.0 ) );

  if( dot( recon_normal, orientation ) - normal_threshold < 0.0 )
    discard;

  color = decal_albedo;
  normals = vec4(decal_normal * 0.5 + 0.5, 1);
}
