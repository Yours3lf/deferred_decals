#version 430 core

layout(binding=0) uniform sampler2D texture0; //albedo tex
layout(binding=1) uniform sampler2D texture1; //normal tex
layout(binding=2) uniform sampler2D texture2; //depth tex

uniform vec3 light_dir; //directional light direction

in vec4 vs_pos;
in vec2 tex_coord;

layout(location=0) out vec4 color;

void main()
{
  float depth = texture(texture2, tex_coord).x;
  
  //background coloring
  if(depth > 0.99)
  {
    color = vec4(0.5, 0.5, 0.8, 1);
    return;
  }

  vec3 n = texture(texture1, tex_coord).xyz * 2 - 1;
  vec3 l = light_dir;
  
  float n_dot_l = max( dot( n, l ), 0 );

  vec3 albedo = texture(texture0, tex_coord).xyz;
  
  color = vec4( albedo * n_dot_l, 1.0  );
}
